<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I'maKash]]></title>
  <link href="http://akash0x53.github.com/atom.xml" rel="self"/>
  <link href="http://akash0x53.github.com/"/>
  <updated>2013-05-09T01:15:56+05:30</updated>
  <id>http://akash0x53.github.com/</id>
  <author>
    <name><![CDATA[Akash]]></name>
    <email><![CDATA[akash0x53s@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RGB Normalization]]></title>
    <link href="http://akash0x53.github.com/blog/2013/04/29/normalization/"/>
    <updated>2013-04-29T20:16:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2013/04/29/normalization</id>
    <content type="html"><![CDATA[<p>Segmentation is always a very important and basic task while detecting a particular object. For example, In <a href="http://www.pranavmistry.com/projects/sixthsense/images/full/sixthsense12.jpg">this</a> picture, Pranav Mistry wearing color markers on his fingers to track the motion of fingers and do some task according to movement of fingers.</p>

<!--more-->


<p>Is it sound easy? Yeah! but detecting an object is not an easy task. Light also play crucial role. For example, if you have unidirectional source of light then it creates shadow and different shades of colors on object as you can see in following picture.</p>

<p><img src="http://akash0x53.github.com/images/norm/norm.jpg" width="500"><br/>
Intense light from right side of body whiten the right side of body. Detecting skin or Tshirt from this image is not possible as different shades of colors are there. Some part is highlighted and some in shadowed region. If we choose to detect blue T-shirt using RGB value that range varies from (10,80,200) to (10,70,230) (approximate values) then it will not detect the whole T-shirt. It will partially detect T-shirt and this is not what you want.</p>

<p>So to reduce the effects of light, Normalization of color space is helpful. Normalization removes highlighted regions, shadows and make that object easier to detect.<br/>
See the following image. Its free from highlighted region, shadow and objects are easily detectable now. For example, human skin, green curtain and Tshirt.
<img src="http://akash0x53.github.com/images/norm/norm2.jpg" width="500"></p>

<h4>How to convert RGB to Normalized-RGB?</h4>

<p>Now some mathematical work starts here, following equation convert a pixel to normalized pixel.<br/>
<img src="http://akash0x53.github.com/images/norm/eq.png" width="400"></p>

<h5>Explaination:</h5>

<p>let R,G,B are pixel values,<br/>
to normalized the pixel, divide the individual color component with `total&#8217; and multiply by 255. Here 255 is scaling factor. You can use any other scaling factor.As this image is 8 bit scaling value is 255.</p>

<p>let f(10,10)=(100,200,150)<br/>
R=100,<br/>
G=200,<br/>
B=150</p>

<p>then,  total=(R+G+B)=450</p>

<p>now,
 R&#8217;=(100/450)x255=0.22x255=56.66<br/>
 G&#8217;=(200/450)x255=0.44x255=113.33<br/>
 B&#8217;=(150/450)x255=0.33x255=85<br/>
then new pixel value is (56,113,85) respective to RGB.</p>

<h6>Why scaling factor is required?</h6>

<p>In previous example, division results in floating point value that is less than 1.00. Division value 0.22 which then rounded of to 0 that means black color. To avoid this, it must be multiplied by some value.</p>

<h4>Python-OpenCV implementation</h4>

<p>This function accepts 8bit image that captured by using OpenCV-python bindings.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def normalized(down):
</span><span class='line'>
</span><span class='line'>        norm=np.zeros((600,800,3),np.float32)
</span><span class='line'>        norm_rgb=np.zeros((600,800,3),np.uint8)
</span><span class='line'>              
</span><span class='line'>        b=rgb[:,:,0]
</span><span class='line'>        g=rgb[:,:,1]
</span><span class='line'>        r=rgb[:,:,2]
</span><span class='line'>        
</span><span class='line'>        sum=b+g+r
</span><span class='line'>        
</span><span class='line'>        norm[:,:,0]=b/sum*255.0
</span><span class='line'>        norm[:,:,1]=g/sum*255.0
</span><span class='line'>        norm[:,:,2]=r/sum*255.0
</span><span class='line'>        
</span><span class='line'>        norm_rgb=cv2.convertScaleAbs(norm)
</span><span class='line'>        return norm_rgb</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project report using Latex]]></title>
    <link href="http://akash0x53.github.com/blog/2013/04/26/latex/"/>
    <updated>2013-04-26T11:02:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2013/04/26/latex</id>
    <content type="html"><![CDATA[<p>Hello friends, this post is about LaTeX report. Recently i submitted my final year project report to college. Instead of using M$ word i tried LaTeX.<!--more--> Believe me guys LaTeX (latex) is fun! Though it took me almost 20 days to finalize the documentation, but it was fun, quality was good and it looks professional.</p>

<p>I&#8217;m aslo latex beginner, but i managed to do lots of things in LaTeX like drawing UML diagrams, block diagrams, customizing page and much more. I have made my project template available for you guys as reference, you can fork, download it from <a href="https://github.com/akash0x53/report_latex">here</a>.</p>

<p>Download and install latest Latex version, install packages mentioned in README section.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plot Histogram using OpenCV]]></title>
    <link href="http://akash0x53.github.com/blog/2013/01/17/calculate-histogram-using-opencv/"/>
    <updated>2013-01-17T17:34:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2013/01/17/calculate-histogram-using-opencv</id>
    <content type="html"><![CDATA[<p>Histogram is a handy way of representing whatever it is that you have learned from image. Histogram of a image can be used to check whether image is too bright or too dark or contrast.</p>

<!--more-->




<h4>Plot Histogram</h4>


<p></p>

<figure class='code'><figcaption><span>Histogram.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">numpy.ma.core</span> <span class="kn">import</span> <span class="n">ceil</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">threading</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">cv2</span> <span class="kn">import</span> <span class="n">cv</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Histogram</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">inp</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#temporary file</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">inp</span><span class="o">==</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">LoadImage</span><span class="p">(</span><span class="s">&quot;backimg.jpeg&quot;</span><span class="p">)</span> <span class="c">#temporary image</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="o">=</span><span class="n">inp</span> <span class="c">#input from camera</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">CvtColor</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">,</span><span class="n">cv</span><span class="o">.</span><span class="n">CV_BGR2HSV</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">#create temporary images to store Hue,Saturation, value planes</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">planeR</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateImage</span><span class="p">(</span><span class="n">cv</span><span class="o">.</span><span class="n">GetSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">planeG</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateImage</span><span class="p">(</span><span class="n">cv</span><span class="o">.</span><span class="n">GetSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">planeB</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateImage</span><span class="p">(</span><span class="n">cv</span><span class="o">.</span><span class="n">GetSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">hranges</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">180</span><span class="p">]]</span> <span class="c">#180 for Hue</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hist</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateHist</span><span class="p">([</span><span class="mi">30</span><span class="p">],</span><span class="n">cv</span><span class="o">.</span><span class="n">CV_HIST_ARRAY</span><span class="p">,</span><span class="n">hranges</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">#another IplImage for drawing graph</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateImage</span><span class="p">((</span><span class="mi">300</span><span class="p">,</span><span class="mi">200</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">Zero</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">PutText</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">,</span><span class="s">&quot;Histogram: RGB&quot;</span><span class="p">,(</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span><span class="n">cv</span><span class="o">.</span><span class="n">InitFont</span><span class="p">(</span><span class="n">cv</span><span class="o">.</span><span class="n">CV_FONT_HERSHEY_PLAIN</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">SpliImage</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">img</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">img</span><span class="o">==</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>            <span class="n">img</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">Split</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">planeB</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">planeG</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">planeR</span><span class="p">,</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">planes</span><span class="o">=</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">planeR</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">planeG</span><span class="p">,</span><span class="bp">self</span><span class="o">.</span><span class="n">planeB</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">planes</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">CalcHistoGram</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">plane_no</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">out</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">SpliImage</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">CalcHist</span><span class="p">([</span><span class="n">out</span><span class="p">[</span><span class="n">plane_no</span><span class="p">]],</span><span class="bp">self</span><span class="o">.</span><span class="n">hist</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">NormalizeHist</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hist</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">color</span><span class="o">==</span><span class="s">&quot;red&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span><span class="p">(</span><span class="n">color</span><span class="o">==</span><span class="s">&quot;green&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span><span class="p">(</span><span class="n">color</span><span class="o">==</span><span class="s">&quot;blue&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="o">=</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">DrawHisto</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">DrawHisto</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c">#min,max,a,b=cv.GetMinMaxHistValue(self.hist)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span>
</span><span class='line'>            <span class="n">val</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">QueryHistValue_1D</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">hist</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="n">val</span><span class="o">=</span><span class="n">val</span><span class="o">*</span><span class="mi">600</span>
</span><span class='line'>            <span class="n">v</span><span class="o">=</span><span class="n">ceil</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">cv</span><span class="o">.</span><span class="n">Line</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">graph</span><span class="p">,(</span><span class="n">i</span><span class="o">*</span><span class="mi">7</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span><span class="mi">200</span><span class="p">),(</span><span class="n">i</span><span class="o">*</span><span class="mi">7</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span><span class="mi">200</span><span class="o">-</span><span class="nb">int</span><span class="p">(</span><span class="n">v</span><span class="p">)),</span><span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">HistoThread</span><span class="p">():</span>
</span><span class='line'>    <span class="n">h</span><span class="o">=</span><span class="n">Histogram</span><span class="p">(</span><span class="n">frm</span><span class="p">)</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">CalcHistoGram</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="n">CalcHistoGram</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s">&quot;green&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c">#h.CalcHistoGram(2,&quot;blue&quot;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">.</span><span class="n">ShowImage</span><span class="p">(</span><span class="s">&quot;Red Plane Histogram&quot;</span><span class="p">,</span><span class="n">h</span><span class="o">.</span><span class="n">graph</span><span class="p">)</span>
</span><span class='line'>    <span class="k">del</span> <span class="n">h</span> <span class="c">#dereferencing h</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cap</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">CreateCameraCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t0</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'>        <span class="n">frm</span><span class="o">=</span><span class="n">cv</span><span class="o">.</span><span class="n">QueryFrame</span><span class="p">(</span><span class="n">cap</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">HistoThread</span><span class="p">())</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">cv</span><span class="o">.</span><span class="n">ShowImage</span><span class="p">(</span><span class="s">&quot;video&quot;</span><span class="p">,</span><span class="n">frm</span><span class="p">)</span>
</span><span class='line'>        <span class="n">t1</span><span class="o">=</span><span class="n">time</span><span class="o">.</span><span class="n">clock</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;time taken: &quot;</span><span class="p">,</span><span class="n">t1</span><span class="o">-</span><span class="n">t0</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">cv</span><span class="o">.</span><span class="n">WaitKey</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">10</span><span class="p">):</span>
</span><span class='line'>            <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://akash0x53.github.com/images/histogram/lenna.png" width="400">
<img src="http://akash0x53.github.com/images/histogram/histo.png" width="200"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send SMS from your Desktop]]></title>
    <link href="http://akash0x53.github.com/blog/2012/12/29/send-sms-from-your-desktop/"/>
    <updated>2012-12-29T12:45:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2012/12/29/send-sms-from-your-desktop</id>
    <content type="html"><![CDATA[<p>This is my first application that i coded in Python and designed GUI using Glade+Gtk.</br>
Millions of people use way2sms site for sending free SMS across india. There is no official desktop application provided by way2sms. So i create this app that gives you good GUI,faster speed,same contact list as you have on your way2sms account.</p>

<!--more-->




<h3>Why I wrote this app? </h3>


<p>
Who don&#8217;t like to Texting friends?</p>

<p>Platform: GNU/Debain based Linux ( Ubuntu 11.10)<br/>
Language: Python (version 2.7.3)<br/>
External libraries: <a href="http://www.crummy.com/software/BeautifulSoup/">BeautifulSoup 4</a>, <a href="http://www.pygtk.org/">PyGtk</a> <br/>
UI tool: <a href="http://glade.gnome.org/">Glade 3.8</a></p>

<p><a href="https://github.com/akash0x53/way2SMS/archive/master.zip">Download source code</a></p>

<p>GitHub repository <a href="https://github.com/akash0x53/way2SMS">here</a></p>

<p>These are snapshots of Way2SMS-Desktop App v1.0</p>

<p><img src="http://akash0x53.github.com/images/way2sms/1.png" width="500">
<img src="http://akash0x53.github.com/images/way2sms/2.png" width="300">
<img src="http://akash0x53.github.com/images/way2sms/4.png" width="500">
<img src="http://akash0x53.github.com/images/way2sms/5.png" width="500">
<img src="http://akash0x53.github.com/images/way2sms/6.png" width="300"></p>

<p>Have fun ! Enjoy Texting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unpacking Ubislate 7Ci]]></title>
    <link href="http://akash0x53.github.com/blog/2012/12/19/unpacking-ubislate-7ci/"/>
    <updated>2012-12-19T20:10:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2012/12/19/unpacking-ubislate-7ci</id>
    <content type="html"><![CDATA[<p>Since the announcement of a low price tablet named <a href="http://www.ubislate.com/aakash/index.html">Aakash</a> millions of people booked tablet. The fancy Android running tablet you could owned in just 2000 bucks. However lots of people are waiting for their tabler. </br>On 15th december 2012, on Saturday i got a call from courier that your parcel from Datawind had arrived. <!--more-->
I was happy as its my first Android device. I checked my email to ensure what i had registered. I found that i had upgraded my tablet order to <a href="http://www.ubislate.com/ubislate/index.html">Ubislate7Ci</a>. </br></p>

<p><img src="http://akash0x53.github.com/images/pack.JPG" width="350" height="350" title="Ubislate" alt="Packed piece"> This is delivered box piece of tablet. Box contents your tablet, AC charger and data cable. Although on the box they mentioned of warranty card but i didnt find any document. Tablet was covered in plastic, with home charger and data cable.</p>

<h5>Technical Specification</h5>


<p></br>
1. ARM Cortex A8, 1GHz processor</br>
2. 7&#8221; Capacitive touch screen display</br>
3. RAM 512MB</br>
4. Flash memory mentioned as 4GB but actually its 2GB</br>
5. Android 4.0, kernel Linux 3.0</br>
6. Front side VGA camera (good for video chat, but almost useless)</br>
7. Mini-USB, Micro-SD card slots are provided</br>
8. It has no SIM suport only wi-fi connectivity.</br>
9. 3.5mm Audio output jack.</br>
10. Battery backup 180 mins
10. price Rs. 3999 with delivery.</p>

<p><img src="http://akash0x53.github.com/images/screen.JPG" width="350" height="350" title="Ubislate" alt="Packed piece"></p>

<h5>Whats good</h5>


<p></br>
1. Capacitive 7&#8221; touch screen display of 800x600 resolution. </br>
2. Ligh weight 320gm</br>
3. Android 4.0 </br>
4. 1Ghz processor with HD video co-processor</br>
5. 720p HD video runs smoothly.</br>
6. price. only 3999 Rs.</p>

<h5>Whats Bad</h5>


<p></br>
1. poor battery backup</br>
2. generates heat</br>
3. poor video camera</br>
4. no rear camera</br>
5. No pre-installed apps</br></p>

<h5>Whats ugly!</h5>


<p></br>
1. battery backup is very poor. With wi-fi it discharges very fast.</br>
2. No SIM support.</br></p>

<p><a href="http://www.youtube.com/watch?v=ThG1g5e_yPc&feature=youtu.be">Watch Video</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basics of OctoBlog]]></title>
    <link href="http://akash0x53.github.com/blog/2012/12/18/road-ahead-write-a-blog/"/>
    <updated>2012-12-18T14:47:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2012/12/18/road-ahead-write-a-blog</id>
    <content type="html"><![CDATA[<p>Okay&#8230; So its time to create a new blog using Octopress. After a lot of hardwork on deploying Octopress you could not stop yourself to write. So time to learn Octopress features.</p>

<!--more-->


<p>first of all, create a new post using</p>

<figure class='code'><figcaption><span>new post</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;post_name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create a directory <code>source/_post/</code> and a markdown file naming as
<code>YY-MM-DD-blog_name.markdown</code> in &#8220;_post&#8221; directory. Reason for this convention is &#8220;permalink&#8221;. It helps to create <a href="http://en.wikipedia.org/wiki/Permalink">permalink.</a> This syntax is human-readable and gives you idea of when was the particular post written &amp; name of the post.</p>

<p>Open newly created markdown file using any editor like VI,emacs,gedit as your wish. You will find properties of post as</p>

<pre><code>    ---
    layout: post
    title: "Basics of OctoBlog"
    date: 2012-12-18 14:47
    comments: true
    categories: Octopress
    ---
</code></pre>

<p>This is YAML front matter. As per jekyll, any file with YAML front matter will be processed as jekyll special file. Above texts are of this post. <code>layout, title, date, comments, categories</code> these are special variables.</br></p>

<p><code>layout: post</code> specifies to use layout file <code>post.html</code> which reside in directory <code>source/_layout</code></br>
&#8220;categories&#8221; variable defined the category of your post. You can have multiple categories in your blog like Networking,Programming,Social. If your post belong to &#8220;Social&#8221; category then simply set categories to Social. Posts belongs to same category will be grouped.</br></p>

<p>From the next line to - - - you can start writing your blog.</p>

<p>Commonly used markups while decorating blog<br>
1. Excerpts: On your home page you wants to show only some content of post and then link to full post. You might have seen &#8220;Read more&#8221;, &#8220;Continue&#8221;, etc. links on blogs. These are Excerpts. It is simple in Octopress. Just add <code>&lt;!--more--&gt;</code> ( &#8220;more&#8221; enclosed in html comment).</br>
2. <code>&lt;a href="some link"&gt; Text to display &lt;/a&gt;</code> HTML Anchor tag. No need to explain</br>
3. to write in a box as above ( i dont know what is the term for it ), enclose text within 2 backticks as</br>
&#8220; your text &#8220;</br>
4. to include source code in your post</p>

<pre><code>```[lang name] [title of source code]
...your code
...
... 
```(again ends with 3 backticks)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress and GitHub]]></title>
    <link href="http://akash0x53.github.com/blog/2012/12/16/octopress-and-github/"/>
    <updated>2012-12-16T19:09:00+05:30</updated>
    <id>http://akash0x53.github.com/blog/2012/12/16/octopress-and-github</id>
    <content type="html"><![CDATA[<p>Finally i managed to deploy Octopress on <a href="http://pages.github.com">GitHub (pages)</a> with custom theme. I added facebook profile link that wasn&#8217;t provided by Octopress. Octopress is really easy,simple and beautiful.But I faced some problems while setting up Octopress.</br>So i thought of writing the first blog on &#8220;Deploying Octopress on GitHub&#8221;.</p>

<!--more-->


<p>I assumed you have installed RVM and Ruby on your machine.
</br>My environment: <code>RVM 1.17.3, Ruby 1.9.3p327, Ubuntu 11.10</code></p>

<h4>Installing Octopress</h4>




<figure class='code'><figcaption><span>prepare workspace</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>mkdir github_pages <span class="c">#create your project directory</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span><span class="nb">cd </span>github_pages
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git clone https://github.com/imathis/octopress.git octopress <span class="c">#clone octopress repo into octopress directory</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span>bundle install <span class="c"># more about bundler http://gembundler.com/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now install Octopress</p>

<figure class='code'><figcaption><span>install Octopress</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure>


<p>This command install Octopress default theme. You can install third party themes for octopress. <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">List of third party themes</a></p>

<h4>Deploying to GitHub</h4>


<p>You must have a github repository with strict naming convention as <code>username.github.com</code>.
After creating repository on GitHub, its time to configure rake for deploying blog.</p>

<figure class='code'><figcaption><span>rake setup</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>This will ask you for github repository details. You have to follow the convention as</p>

<p><code>git@github.com:username/username.github.com</code>
Note: do not add &#8220;.git&#8221; at the end.</p>

<figure class='code'><figcaption><span>Check for remote repository</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote -v
</span><span class='line'>
</span><span class='line'><span class="c">#This was my output.</span>
</span><span class='line'>origin    git@github.com:akash0x53/akash0x53.github.com <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>origin    git@github.com:akash0x53/akash0x53.github.com <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#If your output is</span>
</span><span class='line'>octopress   git://github.com/imathis/octopress.git <span class="o">(</span>fetch<span class="o">)</span>
</span><span class='line'>octopress   git://github.com/imathis/octopress.git <span class="o">(</span>push<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#then you need to add your repo using</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git add remote add origin git@github.com:username/username.github.com.git
</span></code></pre></td></tr></table></div></figure>


<p>To delete Octopress branch using</p>

<figure class='code'><figcaption><span>Deleting remote branch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>git remote rm Octopress
</span></code></pre></td></tr></table></div></figure>


<p>To publish pages on GitHub rename your branch to <code>source</code> branch</p>

<figure class='code'><figcaption><span>rename branch</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>git branch
</span><span class='line'>      * master
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git branch -m master <span class="nb">source</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git branch
</span><span class='line'>      * <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now setup is complete. You can preview your blog using</p>

<pre><code>    akash@desktop:$ rake preview
</code></pre>

<p>This command creates temporary server, listening on port 4000, goto browser and type <a href="localhost:4000">localhost:4000</a>.
If you are satisfied with your work then do not wait to publish.</p>

<figure class='code'><figcaption><span>First push to GitHub</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>akash@desktop:<span class="nv">$ </span>rake generate
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git add .
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git commit -m <span class="s2">&quot;some message&quot;</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span>git push origin <span class="nb">source</span>
</span><span class='line'>akash@desktop:<span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>Wait for email from GitHub; as its your first push.</p>

<p>Congratulations you have successfully deployed your blog on GitHub.</p>
]]></content>
  </entry>
  
</feed>
